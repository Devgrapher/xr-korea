{"version":3,"sources":["webpack:///./src/pages/post.js","webpack:///./src/components/post-preview.js"],"names":["PostContainer","styled","div","PostItem","PostIndex","render","siteTitle","get","this","posts","bgColors","style","background","title","map","i","node","colorPair","length","post","primaryColor","secondaryColor","React","Component","Container","props","color","StyledLink","Link","ImageItem","TextItem","DateItem","CoverImage","Img","Title","h3","Description","dt","to","slug","c","alt","fluid","heroImage","dangerouslySetInnerHTML","__html","description","childMarkdownRemark","html","publishDate","moment","local","format"],"mappings":"sOASMA,EAAgBC,IAAOC,IAAV,sEAAGD,CAAH,sHAWbE,EAAWF,IAAOC,IAAV,iEAAGD,CAAH,wIAWRG,E,kGACJC,OAAA,WACE,IAAMC,EAAYC,IAAIC,KAAM,sCACtBC,EAAQF,IAAIC,KAAM,sCAClBE,EAAW,CACf,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,YAGd,OACE,gBAAC,IAAD,KACE,uBAAKC,MAAO,CAAEC,WAAY,SACxB,gBAAC,IAAD,CAAQC,MAAOP,IACf,gBAACN,EAAD,KACGS,EAAMK,KAAI,WAAUC,GAAO,IAAdC,EAAa,EAAbA,KACNC,EAAYP,EAASK,EAAIL,EAASQ,QACxC,OACE,gBAACf,EAAD,KACE,gBAAC,IAAD,CAAagB,KAAMH,EAAMI,aAAcH,EAAU,GAAII,eAAgBJ,EAAU,a,GAzBzEK,IAAMC,WAoCfnB,a,yDCnEf,4FAMMoB,EAAYvB,IAAOC,IAAV,0EAAGD,CAAH,uKAKO,SAAAwB,GAAK,OAAIA,EAAMC,SAS/BC,EAAa1B,YAAO2B,QAAV,2EAAG3B,CAAH,yEAQV4B,EAAY5B,IAAOC,IAAV,0EAAGD,CAAH,mBAIT6B,EAAW7B,IAAOC,IAAV,yEAAGD,CAAH,iDAMR8B,EAAW9B,IAAOC,IAAV,yEAAGD,CAAH,8FAGQ,SAAAwB,GAAK,OAAIA,EAAMC,SAK/BM,EAAa/B,YAAOgC,KAAV,2EAAGhC,CAAH,kBAIViC,EAAQjC,IAAOkC,GAAV,sEAAGlC,CAAH,4CAKLmC,EAAcnC,IAAOC,IAAV,4EAAGD,CAAH,MAKF,oBAFGoC,EAEDlB,EAAF,EAAEA,KAAMC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,eAAtB,OACb,gBAACG,EAAD,CAAWE,MAAON,GAChB,gBAACS,EAAD,KACE,gBAACF,EAAD,CAAYW,GAAE,SAAWnB,EAAKoB,KAAQC,GAAC,GACrC,gBAACR,EAAD,CAAYS,IAAI,GAAGC,MAAOvB,EAAKwB,UAAUD,UAG7C,gBAACZ,EAAD,KACE,gBAACI,EAAD,KACE,gBAACP,EAAD,CAAYW,GAAE,SAAWnB,EAAKoB,MAASpB,EAAKN,QAE9C,gBAACuB,EAAD,CACEQ,wBAAyB,CACvBC,OAAQ1B,EAAK2B,YAAYC,oBAAoBC,SAInD,gBAACjB,EAAD,CAAUL,MAAOL,IAnBHgB,EAmB6BlB,EAAK8B,YAnB3BC,IAAOb,GAAIc,QAAQC,OAAnB,uB","file":"component---src-pages-post-js-ff3929544cd321645c09.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport get from 'lodash/get';\nimport { Helmet } from 'react-helmet';\nimport Layout from '../components/layout';\nimport PostPreview from '../components/post-preview';\nimport styled from 'styled-components';\n\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-bottom: 9px;\n  &:after {\n    content: \"\";\n  }\n`;\n\nconst PostItem = styled.div`\n  flex-grow: 0;\n  box-sizing: border-box;\n  width: 100%;\n  padding: 4px;\n  @media (min-width: 650px) {\n    width: 50%;\n  @media (min-width: 1200px) {\n    width: 33.3%;\n`;\n\nclass PostIndex extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    const posts = get(this, 'props.data.allContentfulPost.edges');\n    const bgColors = [\n      [\"#CEEBF8\", \"#75D0F1\"],\n      [\"#FFC11F\", \"#D2970F\"],\n      [\"#C2D081\", \"#97AB3F\"],\n      [\"#DE7345\", \"#CD5825\"],\n      [\"#748CBE\", \"#3860AA\"],\n      [\"#FBB6CE\", \"#ED9BC4\"],\n      [\"#A77FAD\", \"#906198\"],\n      [\"#F4F07A\", \"#DED713\"],\n      [\"#4EA648\", \"#438E3E\"],\n    ];\n\n    return (\n      <Layout>\n        <div style={{ background: '#fff' }}>\n          <Helmet title={siteTitle} />\n          <PostContainer>\n            {posts.map(({ node}, i) => {\n              const colorPair = bgColors[i % bgColors.length];\n              return (\n                <PostItem>\n                  <PostPreview post={node} primaryColor={colorPair[0]} secondaryColor={colorPair[1]}  />\n                </PostItem>\n              );\n            })}\n          </PostContainer>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default PostIndex;\n\nexport const pageQuery = graphql`\n  query PostIndexQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allContentfulPost(filter: {node_locale: {eq: \"ko-KR\"}}, sort: { fields: [publishDate], order: DESC }) {\n      edges {\n        node {\n          title\n          slug\n          publishDate\n          tags\n          heroImage {\n            fluid(maxWidth: 350, maxHeight: 196, resizingBehavior: SCALE) {\n              ...GatsbyContentfulFluid_tracedSVG\n            }\n          }\n          description {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport moment from 'moment';\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  overflow: hidden;\n  background-color: ${props => props.color};\n  min-height: 20rem;\n  @media (min-width: 650px) {\n    height: 28rem;\n  > * {\n    overflow: hidden;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  :hover {\n    text-decoration: underline;\n  }\n`;\n\nconst ImageItem = styled.div`\n  flex: 0 0 55%;\n`;\n\nconst TextItem = styled.div`\n  flex: 1 0 35%;\n  padding: 1rem;\n  font-weight: bold;\n`;\n\nconst DateItem = styled.div`\n  flex: 0 0 10%;\n  line-height: 2rem;\n  background-color: ${props => props.color};\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n`;\n\nconst CoverImage = styled(Img)`\n  height: 100%;\n`;\n\nconst Title = styled.h3`\n  margin: 0 0 0.5rem 0;\n  line-height: 1.2em;\n`;\n\nconst Description = styled.div``;\n\n\nconst formatDT = (dt) => moment(dt).local().format(`YYYY년 MM월 DD일`);\n\nexport default ({post, primaryColor, secondaryColor}) => (\n  <Container color={primaryColor}>\n    <ImageItem>\n      <StyledLink to={`/post/${post.slug}`} c>\n        <CoverImage alt=\"\" fluid={post.heroImage.fluid} />\n      </StyledLink>\n    </ImageItem>\n    <TextItem>\n      <Title>\n        <StyledLink to={`/post/${post.slug}`}>{post.title}</StyledLink>\n      </Title>\n      <Description\n        dangerouslySetInnerHTML={{\n          __html: post.description.childMarkdownRemark.html,\n        }}\n      />\n    </TextItem>\n    <DateItem color={secondaryColor}>{formatDT(post.publishDate)}</DateItem>\n  </Container>\n);\n"],"sourceRoot":""}